// Copyright 2009 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Defines the data model which stores Noop programs.

// Generate the java file with:
// protoc core/src/main/proto/noop.proto --java_out=core/src/main/java
// TODO(alexeagle): have buildr run the proto compiler

option java_package = "noop.model.proto";

message Documentation {
  required string summary = 1;
  repeated string author = 2;
  // The order and number of the parameters should match the documentation
  repeated string parameter = 3;
  // Similarly for the return types
  repeated string return = 4;
  optional string details = 5;
}

message Module {
  required string name = 1;
  optional Documentation documentation = 2;
  optional string copyright = 3;
  repeated Binding binding = 4;
  repeated Alias alias = 5;
  repeated Interface interface = 6;
  repeated ConcreteClass concrete_class = 7;
  repeated Test test = 8;
}

message ConcreteClass {
  required string name = 1;
  optional Documentation documentation = 2;
  repeated string super_type = 3;
  repeated Property property = 4;
  repeated Method method = 5;
  repeated Unittest unittest = 6;
}

message Property {
  required string name = 1;
  required string type = 2;
  repeated Modifier modifier = 3;
  optional Documentation documentation = 4;
}

message Binding {
  required string name = 1;
  optional Documentation documentation = 2;
  repeated Modifier modifier = 3;
  required BindingBlock block = 4;
}

message Interface {
  required string name = 1;
  optional Documentation documentation = 2;
  repeated MethodSignature method = 3;
}

message Alias {
  required string name = 1;
  optional Documentation documentation = 2;
  required string of = 3;
}

enum Modifier {
  MUTABLE = 1;
  NATIVE = 2;
}

message MethodSignature {
  required string name = 1;
  optional Documentation documentation = 2;
  repeated Modifier modifier = 3;
  repeated string return_type = 4;
  repeated Property argument = 5;
}

message Method {
  required MethodSignature signature = 1;
  required Block block = 2;
}

message BindingBlock {
  repeated BindOperator bind = 1;
}

message BindOperator {
  required string type = 1;
  required Expression boundTo = 2;
}

message Block {
  repeated Expression expression = 1;
}

message MethodInvocation {
  required Expression lhs = 1;
  required string method = 2;
  repeated Expression argument = 3;
}

message Expression {
  enum Type {
    EVALUATED = 1;
    BOOLEAN_LITERAL = 2;
    STRING_LITERAL = 3;
    NUMBER_LITERAL = 4;
    IDENTIFIER = 5;
    CONDITIONAL = 6;
    DEREFERENCE = 7;
    INDEX = 8;
    METHOD_INVOCATION = 9;
    RETURN = 10;
  }
  // identifies what sort of expression this is
  required Type type = 1;

  // only some of the following should be set, depending on type
  optional bool booleanVal = 2;
  optional string stringVal = 3;
  optional uint32 numberVal = 4; // TODO(alexeagle): need to store floats too
  optional Expression lhs = 5;
  optional Expression rhs = 6;
  optional MethodInvocation methodInvocation = 7;
}

message Unittest {
  required string description = 1;
  optional Documentation documentation = 2;
  optional BindingBlock local_binding = 3;
  required Block block = 4;
}

message Test {
  required string description = 1;
  optional Documentation documentation = 2;
  repeated string tag = 3;
  required Block block = 4;
}
